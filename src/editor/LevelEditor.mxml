<?xml version="1.0" encoding="utf-8"?>
<!--- 
The level editor.
-->
<mx:TitleWindow 
  xmlns:mx="http://www.adobe.com/2006/mxml" 
  xmlns:units="units.*"
  width="670"
  height="350" 
  title="Level Editor" 
  layout="absolute"
  cornerRadius="0"
  backgroundColor="0xe9dfdf"
  backgroundAlpha="1"
  borderColor="0xe9dfdf"
  borderAlpha="1"
  verticalScrollPolicy="off"
  horizontalScrollPolicy="off"
  showCloseButton="true"
  close="close(event);">

    <mx:Script>
    <![CDATA[
      import units.*;
      import utils.Vector2;
      import utils.Geometry;
      import utils.LinkedList.*;
      import __AS3__.vec.Vector;
      import mx.controls.Image;
      import mx.controls.Alert;
      import mx.events.CloseEvent;
      import mx.managers.PopUpManager;
      
      /** The selected new Image to insert. */
      protected var selection:Image;
      
      /** Is the current mouse-selected position for the new Image valid? */
      protected var isValidPosition:Boolean = false;
      /** Is the user currently picking up an Image? */
      protected var isPickUp:Boolean = false;
      
      /** XML output of this level. */
      [Bindable]
      protected var output:XML;
      
      public function init():void {        
        callLater(_init);
      }
      
      // Wait for components to be created.
      private function _init():void {
        sampleRBC.setColors(Color.RED, Color.BLUE);
      }
      
      /** Creates a new unit under the user's cursor for placement on the level. */
      protected function select(c:Class):void {
        switch (c) {
          case EndArea: 
            selection = new EndArea(); 
            break;
          case RBC:
            selection = new RBC();
            (selection as RBC).setColors(sampleRBC.color, sampleRBC.dna);
            break;
          case WBC:
            selection = new WBC();
            break;
        }
        
        selection.useHandCursor = selection.buttonMode = selection.mouseChildren = true;
        
        onMouseMove();
        selection.alpha = 0.6;
        addChild(selection);
        addSelectionListeners();
      }
      
      /** Begins mouse event listening for movement and placement of selected units. */
      protected function addSelectionListeners():void {
        addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
        addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
      }
      
      /** Ends mouse event listening after placement of a selected unit. */
      protected function removeSelectionListeners():void {
        removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
        removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);
      }
      
      /** Centers the selected image to the mouse and checks if this position is valid. */
      protected function onMouseMove(e:MouseEvent = null):void {
        selection.x = container.mouseX - selection.width/2;
        selection.y = container.mouseY - selection.height/2;
        
        isValidPosition = true;
        
        // Check if within screen bounds.
        if (selection.x > 0 && selection.x < container.width - selection.width && 
            selection.y > 0 && selection.y < container.height - selection.height) 
            {
          if (selection is Body) {
            // Check for intersections with other bodies.
            var bodies:Array = level.getChildren().filter(
              function(item:*, i:int, a:Array):Boolean { return (item is Body); }
              );
            
            var p:Vector2 = new Vector2(level.mouseX, level.mouseY);
            var r:Number = (selection as IBoundingSphere).radius;
            
            for each (var b:IBoundingSphere in bodies) {
              if (Geometry.intersect(p, r, b.center, b.radius) != null) {
                isValidPosition = false;
                break;
              }
            }
          }
        } else {
          isValidPosition = false;
        }
        
        selection.filters = isValidPosition ? [glowGreen] : [glowRed];
      }
      
      /** Places selected image in the current mouse position if possible, otherwise nullifies selection. */
      protected function onMouseUp(e:MouseEvent):void {
        removeChild(selection);
        
        if (isValidPosition) {
          selection.alpha = 1;
          selection.filters = null;
          
          level.addChild(selection);
          selection.x = level.mouseX - selection.width/2;
          selection.y = level.mouseY - selection.height/2;
          
          selection.addEventListener(MouseEvent.MOUSE_DOWN, pickUp);
          
          lengthSlider.minimum = Math.max(selection.x + selection.width, lengthSlider.minimum);
        }

        selection = null;
        removeSelectionListeners();
      }
      
      /** "Picks up" an already placed Image in the level. */
      protected function pickUp(e:MouseEvent):void {
        isPickUp = true;
          
        selection = e.currentTarget as Image;
        
        selection.removeEventListener(MouseEvent.MOUSE_DOWN, pickUp);
        level.removeChild(selection);
        
        selection.alpha = 0.6;
        onMouseMove();
        addChild(selection);
        
        addSelectionListeners();
      }
      
      /** Serializes current level data and units into XML and opens save dialog box. */
      protected function save():void {
        output =
          <Symptom length={Math.round(level.width)}>
          </Symptom>;
        
        var images:Array = level.getChildren();
        
        for each (var img:Image in images) {
          var xml:XML;
          
          if (img is EndArea) {
            xml = 
              <EndArea>
                <x>{img.x}</x>
                <y>{img.y}</y>
              </EndArea>;
          } else if (img is RBC) {
            var rbc:RBC = img as RBC;
            
            xml = 
              <RBC>
                <x>{img.x}</x>
                <y>{img.y}</y>
                <color>{Color.toString(rbc.color)}</color>
                <dna>{Color.toString(rbc.dna)}</dna>
              </RBC>;
          } else if (img is WBC) {
            xml = 
              <WBC>
                <x>{img.x}</x>
                <y>{img.y}</y>
              </WBC>;
          } else {
            throw new Error("Unrecognized Object on level canvas.");
          }
          
          output.appendChild(xml);
        }
        
        new FileReference().save(output, "MySymptomLevel.xml");
      }
      
      /** Resets level data and removes all units. */
      protected function reset():void {
        Alert.show("Are you sure you want to reset this level?", 
          "Symptom > Level Editor", 
          Alert.YES | Alert.NO, 
          this, 
          _reset, 
          null, 
          Alert.NO);    
      }
      
      // Listener for reset().
      private function _reset(e:CloseEvent):void {
        if (e.detail == Alert.YES) {  
          level.height = lengthSlider.value = 600;
          level.removeAllChildren();
        }
      }
      
      /** Exits the level editor. */
      protected function close(e:CloseEvent):void {
        Alert.show("Are you sure you want to exit the level editor?", 
          "Symptom Level Editor", 
          Alert.YES | Alert.NO, 
          this, 
          _close, 
          null, 
          Alert.NO);
      }
      
      // Listener for close().
      private function _close(e:CloseEvent):void {
        if (e.detail == Alert.YES) {
          PopUpManager.removePopUp(this);         
        }
      }
    ]]>
  </mx:Script>
  
  <!--
  /////////////////////////////////////////////////////////
  // COMPONENTS
  /////////////////////////////////////////////////////////
  -->
  
  <!--- Provides scrollbars for "level" component. -->
  <mx:Canvas id="container" width="400" height="310">
    <!--- The visual level representation on which units are placed. -->
    <mx:Canvas id="level" 
      width="{Symptom.WIDTH}" height="{Symptom.HEIGHT}" 
      backgroundColor="white"
      verticalScrollPolicy="off" />
  </mx:Canvas>
  
  <!--- Level editor control panel. -->
  <mx:VBox 
    x="415"
    width="235"
    height="310"
    horizontalAlign="center"
    verticalScrollPolicy="on"
    paddingTop="5"
    paddingLeft="10"
    paddingRight="10"
    borderStyle="solid"
    borderColor="0xbb9999"
    borderThickness="1">
    
    <mx:Label text="End area" />
    <units:EndArea id="endArea"
      useHandCursor="true" mouseChildren="true" buttonMode="true"
      mouseDown="select(EndArea);" />
    
    <mx:HRule width="100%" height="15" />
    
    <mx:Label text="Map length" />
    <mx:HSlider id="lengthSlider"
      width="100%"
      minimum="{Symptom.WIDTH}" maximum="{Symptom.MAX_LEVEL_LENGTH}" 
      labels="['Min.', 'Max.']"
      liveDragging="false"
      change="level.width = lengthSlider.value;" />
      
    <mx:HRule width="100%" height="15" />
    
    <units:RBC id="sampleRBC"
      visible="true"
      useHandCursor="true" buttonMode="true" mouseChildren="true" 
      mouseDown="select(RBC);" />
    
    <mx:HBox paddingTop="5">
      <mx:Label text="Cell" paddingTop="4" />
      <mx:Image source="assets/editor/red_box.swf"    click="sampleRBC.setColors(Color.RED,    sampleRBC.dna);" />
      <mx:Image source="assets/editor/blue_box.swf"   click="sampleRBC.setColors(Color.BLUE,   sampleRBC.dna);" />
      <mx:Image source="assets/editor/green_box.swf"  click="sampleRBC.setColors(Color.GREEN,  sampleRBC.dna);" />
      <mx:Image source="assets/editor/yellow_box.swf" click="sampleRBC.setColors(Color.YELLOW, sampleRBC.dna);" />
    </mx:HBox>
    <mx:HBox>
      <mx:Label text="DNA" paddingTop="4" />
      <mx:Image source="assets/editor/red_box.swf"    click="sampleRBC.setColors(sampleRBC.color, Color.RED);" />
      <mx:Image source="assets/editor/blue_box.swf"   click="sampleRBC.setColors(sampleRBC.color, Color.BLUE);"/>
      <mx:Image source="assets/editor/green_box.swf"  click="sampleRBC.setColors(sampleRBC.color, Color.GREEN);"/>
      <mx:Image source="assets/editor/yellow_box.swf" click="sampleRBC.setColors(sampleRBC.color, Color.YELLOW);"/>
    </mx:HBox>
    
    <mx:HRule width="100%" height="15" />
    
    <units:WBC id="sampleWBC" 
      useHandCursor="true" buttonMode="true" mouseChildren="true" 
      mouseDown="select(WBC);" />
    
    <mx:HRule width="100%" height="15" />
    
    <mx:Button width="100%" height="40" label="Save!" click="save();" />
    <mx:Button width="100%" label="Reset" click="reset();" />
  </mx:VBox>
  
  <!--
  /////////////////////////////////////////////////////////
  // FILTERS
  /////////////////////////////////////////////////////////
  -->
  <mx:GlowFilter id="glowRed"   color="0xff0000" blurX="30" blurY="30" inner="true" />
  <mx:GlowFilter id="glowGreen" color="0x00ff00" blurX="30" blurY="30" inner="true" />
  
</mx:TitleWindow>
