<?xml version="1.0" encoding="utf-8"?>
<!--- 
///////////////////////////////////////////////////////////////////////////////
// DESCRIPTION
///////////////////////////////////////////////////////////////////////////////

Symptom is a 2D vertical virus scroller written by William Chou.

The original concept was from the "Contagious Games" team as part of CIS300 
Game Design course in Cornell University, of which William Chou was a member.

See http://willchou.com for more information.

///////////////////////////////////////////////////////////////////////////////
// COPYRIGHT NOTICE
///////////////////////////////////////////////////////////////////////////////

Copyright 2010 William Chou. All rights reserved.

Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this 
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, 
   this list of conditions and the following disclaimer in the documentation 
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY WILLIAM CHOU ``AS IS'' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO 
EVENT SHALL WILLIAM CHOU OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those 
of the authors and should not be interpreted as representing official policies, 
either expressed or implied, of William Chou.

///////////////////////////////////////////////////////////////////////////////
-->
<mx:Application 
  xmlns:mx="http://www.adobe.com/2006/mxml" 
  xmlns:ui="ui.*"
  xmlns:editor="editor.*"
  layout="absolute"
  width="800"
  height="400"
  backgroundColor="0x333333"
  backgroundGradientAlphas="{[0.0, 0.0]}"
  horizontalScrollPolicy="off"  verticalScrollPolicy="off"
  applicationComplete="init();" 
  viewSourceURL="srcview/index.html">

  <mx:Style source="styles/symptom.css" />
  
  <mx:Script>
    <![CDATA[
      import mx.events.EffectEvent;
      import core.*;
      import units.*;
      import units.wbc.*;
      import ui.*;
      import editor.LevelEditor;
      import utils.*;
      import utils.LinkedList.*;
      import __AS3__.vec.Vector;
      import mx.controls.Image;
      import mx.controls.Text;
      import mx.controls.Alert;
      import mx.controls.ProgressBar;
      import mx.containers.Canvas;
      import mx.containers.Panel;
      import mx.modules.ModuleManager;
      import mx.managers.PopUpManager;
      import mx.events.ModuleEvent;
      import mx.events.CloseEvent;
      import mx.events.StateChangeEvent;
      import mx.modules.IModuleInfo;
      import mx.effects.Fade;
      import mx.effects.easing.Cubic;
      
      [Bindable]
      public static var DEBUG:Boolean = false;
      
      /////////////////////////////////////////////////////////////////////////
      // CONSTANTS
      /////////////////////////////////////////////////////////////////////////
      
      /** Width of the game screen. */
      public static const WIDTH:Number = 800;
      /** Height of the game screen. */
      public static const HEIGHT:Number = 400;
      /** Maximum length of a level. */
      public static const MAX_LEVEL_LENGTH:Number = 4000;
      
      /** Amount of simulation steps per second (amount of game loop iterations per second). */
      private const TICKS_PER_SECOND:int = 24;
      /** Amount of time elapsed per simulation step. */
      private const DT:Number = 1.0 / TICKS_PER_SECOND;
      
      /** 
       * The ratio of background movement to foreground movement, 
       * i.e. for every 1 pixel of foreground movement, the amount of background movement. 
       */
      public static const BACKGROUND_PAN_FACTOR:Number = 0.85;
      
      /////////////////////////////////////////////////////////////////////////
      // VARIABLES
      /////////////////////////////////////////////////////////////////////////

      /** For uploading files. */
      private var fileReference:FileReference;
      
      /** Timer for the game loop. */
      private var loopTimer:Timer;
      
      /** The current level being played. */
      private var currentLevel:Level;
      
      private function init():void {
        new FPS(fps);
                
        InputState.initialize(this);
        
        SoundManager.initialize();
        
        // Set up level loading mechanism.
        fileReference = new FileReference();
        fileReference.addEventListener(Event.SELECT, function():void { fileReference.load(); });
        fileReference.addEventListener(Event.COMPLETE, _loadLevelFile, false, 0, true);
        
        addEventListener(StateChangeEvent.CURRENT_STATE_CHANGE, stateChanged);
        
        stage.addEventListener(KeyboardEvent.KEY_DOWN, keyListener);
        stage.addEventListener(KeyboardEvent.KEY_UP, keyListener);
        
        loopTimer = new Timer(1000 / TICKS_PER_SECOND);
        loopTimer.addEventListener(TimerEvent.TIMER, update);
        
        SoundManager.playGameMusic();
        
        play();   
      }
      
      private function keyListener(e:KeyboardEvent):void {
        // This is handled here as opposed to being passed through InputState 
        // because we want pause/unpause functionality to work regardless
        // of whether the main game loop is running or not.
              
        if (e.keyCode == Keyboard.SPACE && e.type == KeyboardEvent.KEY_DOWN) {
          currentState = (currentState == "pause") ? "" : "pause";
        }
      }
      
      /** Handles state changes. */
      private function stateChanged(e:StateChangeEvent = null):void {
        if (currentState != "") {
          loopTimer.stop();
        } else {
          loopTimer.start();
        }
      }
      
      /** Starts a new game to play. */
      private function play(level:Level = null):void {          
        currentLevel = (level != null) ? level : Level.getLevel(0);
        
        /////////////////////////////////////////
        // Set up level styles.
        /////////////////////////////////////////
        
        foreground.removeAllChildren();
        foreground.alpha = 0;
        foreground.width = currentLevel.length;
        foreground.x = foreground.y = 0;
        
        background.width = foreground.width / BACKGROUND_PAN_FACTOR;
        background.x = background.y = 0;
        
        switch (currentLevel.style) {
          case Level.TITLE:
            background.setTileImage(skin);
            break;
          case Level.STANDARD:
            background.setTileImage(standard);
            break;
          default:
            throw new Error("Unrecognized level style.");
            break;
        }
        
        /////////////////////////////////////////
        // Load level data.
        /////////////////////////////////////////
        
        for each (var img:Image in currentLevel.images) {
          foreground.addChild(img);
        }

        for each (var object:GameObject in currentLevel.getObjects()) {
          foreground.addChild(object.graphics);
        }
        
        /////////////////////////////////////////
        // Start game.
        /////////////////////////////////////////
                        
        levelTransition.play([foreground, background], true);

        loopTimer.start();
      }
      
      /** Ends the game. */
      public function endGame(isWin:Boolean):void {
        loopTimer.stop();
        
        // If player won and next level exists, advance to it.
        // Otherwise, reload first level.
        var f:Function = function():void { 
          var next:Level = Level.getLevel(currentLevel.nextLevel);
          
          if (isWin && next != null) {
            play(next); 
          } else {
            play();
          }
          
          levelTransition.removeEventListener(EffectEvent.EFFECT_END, arguments.callee);
          }
          
        levelTransition.addEventListener(EffectEvent.EFFECT_END, f);
        levelTransition.play([foreground, background]);
      }
      
      /** The main game loop. */
      private function update(e:TimerEvent):void {
        foreground.graphics.clear();

        /////////////////////////////////////////
        // CHECK FOR VICTORY/LOSS CONDITION
        /////////////////////////////////////////
        
        if (currentLevel.state == LevelState.WIN)
          endGame(true);
        else if (currentLevel.state == LevelState.LOSE)
          endGame(false);
        
        /////////////////////////////////////////
        // UPDATE LEVEL/OBJECTS
        /////////////////////////////////////////
        
        currentLevel.update(DT);
        
        /////////////////////////////////////////
        // SCROLL SCREEN
        /////////////////////////////////////////

        var epsilon:Number = 10;
        var virusCenter:Vector2 = currentLevel.virusPosition;
        
        // Scroll screen according to virus position.
        if (virusCenter.x > width/2 && foreground.x > -foreground.width + width + epsilon) {
          var delta:Number = Math.min(0, width/2 - virusCenter.x - foreground.x);
          
          foreground.x += delta;
          background.x += delta * BACKGROUND_PAN_FACTOR;
        }
        
        /////////////////////////////////////////
        // UPDATE INPUT STATE
        /////////////////////////////////////////
        
        InputState.update();
      }
      
      private function openLevelEditor():void {
        currentState = "pause";
        
        var editor:LevelEditor = new LevelEditor();
        
        PopUpManager.addPopUp(editor, this, false);
        PopUpManager.centerPopUp(editor);
      }
      
      // Listener to load level data from a pre-selected file. Should not be called directly.
      private function _loadLevelFile(e:Event):void {
        var buffer:ByteArray = fileReference.data;
        
        try {
          var level:XML = XML(buffer.readUTFBytes(buffer.bytesAvailable));
        } catch (e:Error) {
          Alert.show("Selected file has invalid content!", "Symptom > Load custom level");
          return;
        }
        
        play(new Level(level));
      }
    ]]>
  </mx:Script>
  
  <!--
  /////////////////////////////////////////////////////////
  // COMPONENTS
  /////////////////////////////////////////////////////////
  -->  
    
  <!--- Background contains tiling background image with parallax movement. -->
  <ui:TilingCanvas id="background"
    height="400"
    horizontalScrollPolicy="off" verticalScrollPolicy="off" />
  
  <!--- Foreground contains virus and interactive objects. -->
  <mx:Canvas id="foreground"
    height="400"
    horizontalScrollPolicy="off" verticalScrollPolicy="off" />
    
  <!--- Toggles game debug state. -->
  <mx:Image id="wrench"
    x="713" y="5"
    source="@Embed(source='assets/ui/wrench.swf')"
    toolTip="Toggle debug"
    click="Symptom.DEBUG = !Symptom.DEBUG;" />  
    
  <!--- Opens level editor. -->
  <mx:Image id="hammer"
    x="743" y="5"
    source="@Embed(source='assets/ui/hammer.swf')" 
    toolTip="Level editor"
    click="openLevelEditor();" />
    
  <!--- Opens dialog for loading a custom level. -->
  <mx:Image id="folder"
    x="770" y="7"
    source="@Embed(source='assets/ui/folder.swf')"
    toolTip="Load custom level"
    click="fileReference.browse([new FileFilter('Symptom Level', '*.xml')]);" />
    
  <!-- DEBUG -->
  <mx:Label id="fps" color="white" visible="{Symptom.DEBUG}" />
  
  <!--
  /////////////////////////////////////////////////////////
  // BACKGROUND IMAGES
  /////////////////////////////////////////////////////////
  -->  
    
  <!-- Skin background. For loading into a TilingCanvas only. -->
  <mx:Image id="skin"
    visible="false"
    source="@Embed(source='assets/levels/background_skin.jpg')" />
  
  <!--- Standard background image. For loading into a TilingCanvas only. -->
  <mx:Image id="standard"
    visible="false"
    source="@Embed(source='assets/levels/background_1.jpg')" />
  
  <!--
  /////////////////////////////////////////////////////////
  // DECLARATIONS
  /////////////////////////////////////////////////////////
  -->
  
  <!--- Effect for fading out destroyed bodies. -->
  <mx:Fade id="fade" alphaTo="0.0" easingFunction="{Cubic.easeIn}" />
  
  <!--- Effect for transitioning out of a level. -->
  <mx:Fade id="levelTransition" alphaFrom="1.0" alphaTo="0.0" easingFunction="{Cubic.easeOut}" duration="1000" />
  
  <!--
  /////////////////////////////////////////////////////////
  // STATES
  /////////////////////////////////////////////////////////
  -->

  <mx:states>
    <mx:State name="pause">
      <mx:AddChild>
        <mx:Canvas id="modal" 
          width="100%" height="100%" 
          backgroundColor="black" 
          alpha="0.5" />
      </mx:AddChild>
      <mx:AddChild>
          <mx:Label
            x="{width/2 - 10}" y="{height/2 - 10}"
            text="(SPACE)"
            fontWeight="bold"
            color="white" />
      </mx:AddChild>
    </mx:State>
  </mx:states>
  
</mx:Application>