<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
  xmlns:mx="http://www.adobe.com/2006/mxml"
  xmlns:ui="ui.*"
  layout="absolute"
  width="640"
  height="480"
  backgroundColor="0x333333"
  backgroundGradientAlphas="{[0.0, 0.0]}"
  horizontalScrollPolicy="off"  verticalScrollPolicy="off"
  frameRate="30"
  applicationComplete="init();" 
  viewSourceURL="srcview/index.html">

  <mx:Style source="styles/asteroids.css" />

  <mx:Script>
    <![CDATA[
      import flash.utils.getTimer;
      import core.*;
      import units.rocket.Rocket;
      import units.rocket.upgradables.NumericUpgradable;
      import units.Ufo;
      import units.asteroids.*;
      import units.projectiles.*;
      import particle.*;
      import ui.TilingComponent;
      import utils.*;
      import __AS3__.vec.Vector;
      import mx.effects.easing.Exponential;
      import mx.effects.easing.Back;
      
      /////////////////////////////////////////////////////////////////////////
      // CONSTANTS
      /////////////////////////////////////////////////////////////////////////
      
      /** Game width. */
      public static const WIDTH:int = 640;
      
      /** Game height. */
      public static const HEIGHT:int = 480;
      
      /** 
       * The proportion of panning speeds between neighboring layers,
       * e.g. midground travels PAN_FACTOR times as fast as the foreground,
       * and background travels PAN_FACTOR times as fast as the midground.
       */ 
      private const PAN_FACTOR:Number = 0.9;
      
      /** The distance at which an offscreen unit will wrap to the opposite side. */
      private static const OFFSCREEN_PADDING:int = 40;
      
      /////////////////////////////////////////////////////////////////////////
      // GAME VARIABLES
      /////////////////////////////////////////////////////////////////////////
      
      /** If true, debug information is drawn on screen. */
      public static var DEBUG:Boolean = false;

      /** The game time when the last frame was drawn. */
      private var lastTime:uint;
      
      /** Toggles whether the per-frame global update cycle is called. */
      private var isActive:Boolean = false;

      /////////////////////////////////////////////////////////////////////////
      // LEVEL VARIABLES
      /////////////////////////////////////////////////////////////////////////

      /** The player controlled rocket. */
      private var rocket:Rocket;
      
      /** The currently played level. */
      [Bindable] private var level:Level;
      
      /** Player's current bankroll. */
      [Bindable] public var bankroll:int = 0;

      /////////////////////////////////////////////////////////////////////////
      // METHODS
      /////////////////////////////////////////////////////////////////////////

      /** Initializes system managers and plays level 0. */
      private function init():void         
      {
        SoundManager.initialize();
        SoundManager.playGameMusic(true);
        
        InputState.initialize(this);
        
        ParticleSystem.initialize(particleLayer);
        
        rocket = new Rocket();
        
        addEventListener(Event.ENTER_FRAME, update);
        
        play(0);
      }
      
      /** 
       * Starts a game on a certain level. 
       * Levels only differ in the number of initial asteroids.
       * 
       * @param level - The level number.
       */
      private function play(levelNumber:int):void 
      {
        if (levelNumber < 0) 
          throw new Error("Level must be > 0.");
          
        isActive = false;
        
        // This helps reduce object buildup in the particle system.
        ParticleSystem.reset();
        
        // Clean layers and refresh scenery.
        objectLayer.removeAllChildren();
        particleLayer.removeAllChildren();
        foreground.reset();
        midground.reset();
        background.reset();
        
        // Create the level.
        level = new Level(objectLayer, levelNumber, rocket);
        level.addEventListener(GameEvent.WIN, endGame);
        level.addEventListener(GameEvent.LOSE, endGame);

        // Resume play!
        levelIn.play([level.container]);
        isActive = true;
      }
      
      /** 
       * The main game update method. 
       * Computes dT and updates system-level components.
       * */
      private function update(e:Event):void 
      {
        if (!isActive)
          return;
        
        // Calculate dt (time difference in seconds since last frame).
        var currentTime:uint = flash.utils.getTimer();
        var dt:Number = Math.abs(currentTime - lastTime) / 1000.0;
        lastTime = currentTime;        
        
        // Clear old graphics draws.
        objectLayer.graphics.clear();
        particleLayer.graphics.clear();

        // Camera transform:
        // Shift everything relative to rocket position and put the rocket in the center.
        var rocketToCenter:Vector2 = new Vector2(objectLayer.width / 2, objectLayer.height / 2).subtract(rocket.center);
        
        // Pan scenery.
        foreground.update(rocketToCenter, 1.0 / PAN_FACTOR);
        midground.update(rocketToCenter, PAN_FACTOR);
        background.update(rocketToCenter, PAN_FACTOR * PAN_FACTOR);
        
        // Update level.
        level.update(dt, rocketToCenter);

        // Particles need lovin' too.
        ParticleSystem.update(dt, rocketToCenter);

        // Update input state.
        InputState.update();
      }
      
      /** Player wins or loses the level. */
      private function endGame(e:GameEvent):void 
      {
        if (e.type == GameEvent.WIN)
        {
          bankroll += level.moneyEarned;
          levelWinOut.play([level.container]);
        }
        else if (e.type == GameEvent.LOSE)
          levelLoseOut.play([level.container]);
      }
      
      /** Updates upgrade prices on upgrade window. */
      private function updateUpgradePrices():void 
      {
        var accelerationPrice:int = rocket.acceleration.costOfNextUpgrade();
        var reloadPrice:int       = rocket.reload.costOfNextUpgrade();
        var hyperspacePrice:int   = rocket.hyperspace.costOfNextUpgrade();
        
        lblAccelerationPrice.text = "$" + accelerationPrice;
        lblReloadPrice.text       = "$" + reloadPrice;
        lblHyperspacePrice.text   = "$" + hyperspacePrice;

        lblAccelerationPrice.setStyle("color", (accelerationPrice > bankroll) ? "red" : "white");
        lblReloadPrice.setStyle(      "color", (reloadPrice > bankroll)       ? "red" : "white");
        lblHyperspacePrice.setStyle(  "color", (hyperspacePrice > bankroll)   ? "red" : "white");
      }
      
      /////////////////////////////////////////////////////////////////////////
      // STATIC FUNCTIONS
      /////////////////////////////////////////////////////////////////////////
      
      /** Gets a random visible location on the foreground. */
      public static function randomScreenLocation():Vector2 
      {
        return new Vector2(Math.random() * WIDTH + OFFSCREEN_PADDING, Math.random() * HEIGHT + OFFSCREEN_PADDING);
      }
      
      /** Gets a pseudo-random offscreen location on the foreground. */
      public static function randomOffscreenLocation():Vector2
      {
        var seed:Number = Math.random();
        
        var w:Number = WIDTH + 2 * OFFSCREEN_PADDING;
        var h:Number = HEIGHT + 2 * OFFSCREEN_PADDING;
        
        if (seed < 0.25)
          return new Vector2(Math.random() * w, 0);
        else if (seed < 0.5)
          return new Vector2(Math.random() * w, h);
        else if (seed < 0.75)
          return new Vector2(0, Math.random() * h);
        else 
          return new Vector2(w, Math.random() * h);
      }
      
    ]]>
  </mx:Script>
    
  <!--- Bottom-layer background component. -->
  <ui:TilingComponent id="background" tileImage="{backgroundImage}" width="100%" height="100%" />
  <mx:Image id="backgroundImage" source="assets/back.png" visible="false" />
  
  <!--- Middle-layer background component. -->
  <ui:TilingComponent id="midground" tileImage="{midgroundImage}" width="100%" height="100%" />
  <mx:Image id="midgroundImage" source="assets/mid.png" visible="false" />
  
  <!--- Component on which particles are drawn. -->
  <mx:Canvas id="particleLayer" 
    width="{objectLayer.width}" height="{objectLayer.height}"
    x="{objectLayer.x}" y="{objectLayer.y}" />
  
  <!--- Holds all interactive game objects. -->
  <mx:Canvas id="objectLayer" 
    width="{WIDTH + OFFSCREEN_PADDING * 2}" height="{HEIGHT + OFFSCREEN_PADDING * 2}"
    x="{-OFFSCREEN_PADDING}" y="{-OFFSCREEN_PADDING}"
    horizontalScrollPolicy="off" verticalScrollPolicy="off" />
    
  <!--- Top-layer background component. Occludes object layer. -->
  <ui:TilingComponent id="foreground" tileImage="{foregroundImage}" width="100%" height="100%" />   
  <mx:Image id="foregroundImage" source="assets/fore.png" visible="false" /> 
    
  <!--- Displays current level. -->
  <mx:Label 
    id="lblLevelAndMoney"
    x="10" y="10"
    letterSpacing="3"
    text="{level.levelNumber + ' : $ ' + (bankroll + level.moneyEarned)}" />
    
  <mx:Image id="wrench"
    x="{WIDTH - wrench.width - 8}" y="8"
    width="20" height="20"
    source="assets/ui/wrench.swf"
    click="{DEBUG = !DEBUG;}" />
    
  <!--- Credits display. -->
  <mx:Image id="credits"
    x="{WIDTH - credits.width - 5}" y="{HEIGHT - credits.height - 5}"
    width="108" height="66"
    source="assets/credits.png" />
  
  <!--
  /////////////////////////////////////////////////////////////////////////////
  // WINDOWS
  /////////////////////////////////////////////////////////////////////////////
  -->
    
  <!--- Where the player upgrades the rocket between levels. -->
  <mx:Panel id="upgradeWindow" 
    x="{WIDTH / 2 - upgradeWindow.width / 2}" y="100"
    width="500" height="250"
    layout="vertical" horizontalAlign="center" verticalGap="25"
    visible="false" alpha="0">
    <mx:HBox
      y="50"
      paddingBottom="15"
      horizontalAlign="center" horizontalGap="30">
      <mx:VBox width="125" styleName="column">
        <mx:Label styleName="header" text="ENGINE" truncateToFit="false" />
        <mx:Text text="Improves rocket handling by 20%." width="100%" textAlign="center" />
        <mx:Label id="lblAccelerationPrice" truncateToFit="false" styleName="price" />
        <mx:Image 
          width="40" height="40"
          source="assets/ui/upgrade.swf" 
          click="rocket.acceleration.upgrade(bankroll); updateUpgradePrices();" />
      </mx:VBox>
      
      <mx:VBox width="125" styleName="column">
        <mx:Label styleName="header" text="CANNON" truncateToFit="false" />
        <mx:Text text="Improves cannon firing rate by 7%." width="100%" textAlign="center" />
        <mx:Label id="lblReloadPrice" truncateToFit="false" styleName="price" />
        <mx:Image 
          width="40" height="40"
          source="assets/ui/upgrade.swf" 
          click="rocket.reload.upgrade(bankroll); updateUpgradePrices();" />
      </mx:VBox>
      
      <mx:VBox width="125" styleName="column">
        <mx:Label styleName="header" text="HYPERSPACE" truncateToFit="false" />
        <mx:Text text="Reduces hyperspace jump risk by 15%." width="100%" textAlign="center" />
        <mx:Label id="lblHyperspacePrice" truncateToFit="false" styleName="price" />
        <mx:Image 
          width="40" height="40"
          source="assets/ui/upgrade.swf" 
          click="rocket.hyperspace.upgrade(bankroll); updateUpgradePrices();" />
      </mx:VBox>
    </mx:HBox>
    <mx:Image 
      source="assets/ui/check.swf"
      width="30" height="30"
      click="upgradeOut.play([upgradeWindow]);" />
  </mx:Panel>
  
  <!--
  /////////////////////////////////////////////////////////////////////////////
  // TRANSITIONS
  /////////////////////////////////////////////////////////////////////////////
  -->
  
  <!--- Transition played upon player winning. -->
  <mx:Fade id="levelWinOut" 
    alphaFrom="1.0" alphaTo="0.0" duration="1000" 
    effectEnd="upgradeIn.play([upgradeWindow]);" />
  
  <!--- Transition played upon player losing. -->
  <mx:Fade id="levelLoseOut" 
    alphaFrom="1.0" alphaTo="0.0" duration="1000" 
    effectEnd="play(level.levelNumber);" />
  
  <!--- Transition played on starting a new level. -->
  <mx:Fade id="levelIn" alphaFrom="0.0" alphaTo="1.0" duration="1000" />
  
  <!--- Transitions in the upgrade window. -->
  <mx:Parallel id="upgradeIn" effectStart="upgradeWindow.visible = true;" effectEnd="updateUpgradePrices();">
    <mx:Zoom 
      zoomWidthFrom="0.01" zoomHeightFrom="0.01" zoomWidthTo="1" zoomHeightTo="1"
      easingFunction="{Exponential.easeOut}" />
    <mx:Fade alphaFrom="0" alphaTo="1" easingFunction="{Exponential.easeOut}" />
  </mx:Parallel>
  
  <!--- Transitions out the upgrade window. -->
  <mx:Zoom id="upgradeOut"
    zoomWidthFrom="1" zoomHeightFrom="1" zoomWidthTo="0.01" zoomHeightTo="0.01"
    easingFunction="{Exponential.easeOut}" 
    effectEnd="upgradeWindow.visible = false; play(level.levelNumber);" />
    
</mx:Application>
