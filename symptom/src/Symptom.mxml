<?xml version="1.0" encoding="utf-8"?>
<!--- 
///////////////////////////////////////////////////////////////////////////////
// DESCRIPTION
///////////////////////////////////////////////////////////////////////////////

Symptom is a 2D vertical virus scroller written by William Chou.

The original concept was from the "Contagious Games" team as part of CIS300 
Game Design course in Cornell University, of which William Chou was a member.

See http://willchou.com for more information.

///////////////////////////////////////////////////////////////////////////////
// COPYRIGHT NOTICE
///////////////////////////////////////////////////////////////////////////////

Copyright 2010 William Chou. All rights reserved.

Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this 
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, 
   this list of conditions and the following disclaimer in the documentation 
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY WILLIAM CHOU ``AS IS'' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO 
EVENT SHALL WILLIAM CHOU OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those 
of the authors and should not be interpreted as representing official policies, 
either expressed or implied, of William Chou.

///////////////////////////////////////////////////////////////////////////////
-->
<mx:Application 
  xmlns:mx="http://www.adobe.com/2006/mxml" 
  xmlns:ui="ui.*"
  xmlns:editor="editor.*"
  layout="absolute"
  width="800"
  height="400"
  backgroundColor="0x333333"
  backgroundGradientAlphas="{[0.0, 0.0]}"
  horizontalScrollPolicy="off"  verticalScrollPolicy="off"
  applicationComplete="init();" 
  frameRate="30"
  viewSourceURL="srcview/index.html">

  <mx:Style source="styles/symptom.css" />
  
  <mx:Script>
    <![CDATA[
      import core.*;
      import units.*;
      import units.wbc.*;
      import ui.*;
      import editor.LevelEditor;
      import utils.*;
      import utils.LinkedList.*;
      import __AS3__.vec.Vector;
      import mx.controls.Image;
      import mx.controls.Text;
      import mx.controls.Alert;
      import mx.controls.ProgressBar;
      import mx.containers.Canvas;
      import mx.containers.Panel;
      import mx.modules.ModuleManager;
      import mx.managers.PopUpManager;
      import mx.events.ModuleEvent;
      import mx.events.EffectEvent;
      import mx.events.CloseEvent;
      import mx.events.StateChangeEvent;
      import mx.modules.IModuleInfo;
      import mx.effects.Fade;
      import mx.effects.easing.Cubic;
      
      /** Toggles display of debugging information, e.g. bounding circles. */
      [Bindable] public static var DEBUG:Boolean = false;
      
      /////////////////////////////////////////////////////////////////////////
      // CONSTANTS
      /////////////////////////////////////////////////////////////////////////
      
      /** Width of the game screen. */
      public static const WIDTH:Number = 800;
      
      /** Height of the game screen. */
      public static const HEIGHT:Number = 400;
      
      /** Maximum length of a level. */
      public static const MAX_LEVEL_LENGTH:Number = 4000;
      
      /////////////////////////////////////////////////////////////////////////
      // VARIABLES
      /////////////////////////////////////////////////////////////////////////
            
      /** Handles all game logic. */
      private var game:Game;
      
      /** The game time when the last frame was drawn. */
      private var lastTime:uint;

      /** For loading custom levels. */
      private var fileLoader:FileReference;
      
      /** Displays average framerate. */
      private var fpsCounter:FPS;
      
      /** Initializes system state and begins game. */
      private function init():void {
        // Set up level loading mechanism.
        fileLoader = new FileReference();
        fileLoader.addEventListener(Event.SELECT, function():void { fileLoader.load(); });
        fileLoader.addEventListener(Event.COMPLETE, _loadLevelFile, false, 0, true); 
        
        fpsCounter = new FPS(fps, 10);
        
        InputState.initialize(this);
        
        SoundManager.initialize();
        SoundManager.playGameMusic();
        
        addEventListener(Event.ENTER_FRAME, onEnterFrame);
        
        game = new Game(this);
        game.play();
      }

      /** The main game loop. */
      private function onEnterFrame(e:Event):void {
        // Pause/unpause game on space press.
        currentState = InputState.isKeyDown(Keyboard.SPACE) ? pauseState.name : "";
        
        if (currentState == pauseState.name)
          return;

        // Calculate dt.
        var currentTime:uint = flash.utils.getTimer();
        var dt:Number = Math.abs(currentTime - lastTime) / 1000.0;
        lastTime = currentTime;

        game.update(dt);
        
        InputState.update();
        
        fpsCounter.update(dt);
      }
      
      /** Opens the level editor in a pop up. */
      private function openLevelEditor():void {
        currentState = pauseState.name;
        
        var editor:LevelEditor = new LevelEditor();
        
        PopUpManager.addPopUp(editor, this, false);
        PopUpManager.centerPopUp(editor);
      }
      
      // Listener to load level data from a pre-selected file. Should not be called directly.
      private function _loadLevelFile(e:Event):void {
        var buffer:ByteArray = fileLoader.data;
        
        try {
          var level:XML = XML(buffer.readUTFBytes(buffer.bytesAvailable));
        } catch (e:Error) {
          Alert.show("Selected file has invalid content!", "Symptom > Load custom level");
          return;
        }
        
        game.play(new Level(level));
      }
    ]]>
  </mx:Script>
  
  <!--
  /////////////////////////////////////////////////////////
  // COMPONENTS
  /////////////////////////////////////////////////////////
  -->  

  <!--- Toggles game debug state. -->
  <mx:Image id="wrench"
    x="713" y="5"
    source="@Embed(source='assets/ui/wrench.swf')"
    toolTip="Toggle debug"
    click="Symptom.DEBUG = !Symptom.DEBUG;" />  
    
  <!--- Opens level editor. -->
  <mx:Image id="hammer"
    x="743" y="5"
    source="@Embed(source='assets/ui/hammer.swf')" 
    toolTip="Level editor"
    click="openLevelEditor();" />
    
  <!--- Opens dialog for loading a custom level. -->
  <mx:Image id="folder"
    x="770" y="7"
    source="@Embed(source='assets/ui/folder.swf')"
    toolTip="Load custom level"
    click="fileLoader.browse([new FileFilter('Symptom Level', '*.xml')]);" />
    
  <!--- The FPS display. -->
  <mx:Label id="fps" color="white" visible="{Symptom.DEBUG}" />

  <!--
  /////////////////////////////////////////////////////////
  // STATES
  /////////////////////////////////////////////////////////
  -->

  <mx:states>
    <mx:State id="pauseState" name="pause">
      <mx:AddChild>
        <mx:Canvas id="modal" 
          width="100%" height="100%" 
          backgroundColor="black" 
          alpha="0.5" />
      </mx:AddChild>
      <mx:AddChild>
          <mx:Label
            x="{width/2 - 10}" y="{height/2 - 10}"
            text="(SPACE)"
            fontWeight="bold"
            color="white" />
      </mx:AddChild>
    </mx:State>
  </mx:states>
  
</mx:Application>